pipeline {
    agent any

    stages{
      stage('git pull'){
        steps{
          sh "echo 'git pull'"
          git branch: 'feat/webflux',
            credentialsId: 'yiyaaa',
            url: 'https://github.com/Selected-Seat/selected-seat'
        }
      }

      stage('secret yml setting'){
        steps{
          withCredentials([
            file(
              credentialsId: 'application',
              variable: 'application'
            ),
            file(
              credentialsId: 'application-persistence-database',
              variable: 'jpa'
            ),
            file(
              credentialsId: 'application-persistence-redis-adapter',
              variable: 'redis'
            ),
            file(
              credentialsId: 'env',
              variable: 'env'
            ),
            file(
              credentialsId: 'application-persistence-elasticsearch',
              variable: 'elasticsearch'
            )
          ]){
            script{
              sh 'chmod +x ./sh/mkdir.sh'
              sh 'sudo ./sh/mkdir.sh'
              sh 'sudo cp $application ./web/src/main/resources/application.yml'
              sh 'sudo cp $jpa ./infrastructure/persistence-database/src/main/resources/application-persistence-database.yml'
              sh 'sudo cp $redis ./infrastructure/persistence-redis-adapter/src/main/resources/application-persistence-redis-adapter.yml'
              sh 'sudo cp $env ./ui/.env.production'
              sh 'sudo cp $elasticsearch ./infrastructure/persistence-elasticsearch/src/main/resources/application-persistence-elasticsearch.yml'
            }
          }
        }
      }

      stage('back build') {
          steps {
             sh '''
                echo '빌드를 시작합니다.'
                chmod +x gradlew
                sudo ./gradlew clean bootjar
              '''
          }
      }

      stage('webflux docker build'){
        steps{
          script{
            sh'''
              docker build -t webflux:webflux ./queue
            '''
          }
        }
      }

      stage('webflux image push ECR and update ECS') {
        steps {
            script{
              sh "sudo aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${env.ECR_URI}"

              sh "echo '도커 기존 이미지 삭제'"
              sh "sudo aws ecr batch-delete-image --repository-name selected-seat-test --image-ids imageTag=webflux"

              sh "echo 'webflux image를 ECR에 태그합니다.'"
              sh "sudo docker tag webflux:webflux ${env.ECR_URI}/selected-seat-test:webflux"

              sh "echo 'webflux image를  ECR에 push합니다.'"
              sh "sudo docker push ${env.ECR_URI}/selected-seat-test:webflux"

              sh "echo 'back ecs 업데이트'"
              sh "sudo aws ecs update-service --cluster selected-cluster --service webflux-test --force-new-deployment"
            }
        }
      }

      stage('docker image 정리') {
        steps {
           sh '''
              echo '도커 이미지를 정리합니다.'
              chmod +x ./sh/docker.sh
              sudo ./sh/docker.sh
            '''
        }
      }

    }
}
