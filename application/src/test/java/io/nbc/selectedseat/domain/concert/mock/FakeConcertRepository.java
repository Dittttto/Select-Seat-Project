package io.nbc.selectedseat.domain.concert.mock;

import io.nbc.selectedseat.domain.concert.model.Concert;
import io.nbc.selectedseat.domain.concert.model.ConcertDate;
import io.nbc.selectedseat.domain.concert.model.ConcertRating;
import io.nbc.selectedseat.domain.concert.repository.ConcertRepository;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.test.util.ReflectionTestUtils;

public class FakeConcertRepository implements ConcertRepository {

    private Long autoGeneratedId = 0L;
    private final Map<Long, Concert> store = new HashMap<>();

    @Override
    public Long save(Concert concert) {
        store.put(++autoGeneratedId, new Concert(
            autoGeneratedId,
            concert.getRatingId(),
            concert.getStateId(),
            concert.getRegionId(),
            concert.getCategoryId(),
            concert.getName(),
            concert.getStartedAt(),
            concert.getEndedAt(),
            concert.getThumbnail(),
            concert.getHall(),
            concert.getTicketAmount()
        ));
        return store.get(autoGeneratedId).getCategoryId();
    }

    @Override
    public Optional<Concert> findById(Long concertId) {
        return Optional.ofNullable(store.get(concertId));
    }

    @Override
    public Concert update(Concert concert) {
        Concert updatedConcert = store.get(concert.getConcertId());
        updateFieldIfNotNull(updatedConcert, "ratingId", concert.getRatingId());
        updateFieldIfNotNull(updatedConcert, "stateId", concert.getStateId());
        updateFieldIfNotNull(updatedConcert, "regionId", concert.getRegionId());
        updateFieldIfNotNull(updatedConcert, "categoryId", concert.getCategoryId());
        updateFieldIfNotNull(updatedConcert, "name", concert.getName());
        updateFieldIfNotNull(updatedConcert, "startedAt", concert.getStartedAt());
        updateFieldIfNotNull(updatedConcert, "endedAt", concert.getEndedAt());
        updateFieldIfNotNull(updatedConcert, "thumbnail", concert.getThumbnail());
        updateFieldIfNotNull(updatedConcert, "hall", concert.getHall());
        updateFieldIfNotNull(updatedConcert, "ticketAmount", concert.getTicketAmount());

        return updatedConcert;
    }

    @Override
    public void delete(Long concertId) {
        store.remove(concertId);
    }

    @Override
    public List<Concert> getConcerts() {
        return List.copyOf(store.values());
    }

    @Override
    public List<Concert> getConcertsByConcertIds(List<Long> concertIds) {
        return null;
    }

    @Override
    public Optional<ConcertRating> getConcertRating(final Long ratingId) {
        return Optional.empty();
    }

    @Override
    public List<ConcertDate> getConcertDates(final Long concertId) {
        return null;
    }

    @Override
    public List<Concert> getConcertsByCategory(final Long categoryId) {
        return null;
    }

    @Override
    public Optional<ConcertDate> getConcertDate(final Long concertId) {
        return Optional.empty();
    }

    private <T> void updateFieldIfNotNull(Concert updatedConcert, String fieldName, T value) {
        if (value != null) {
            ReflectionTestUtils.setField(updatedConcert, fieldName, value);
        }
    }
}
